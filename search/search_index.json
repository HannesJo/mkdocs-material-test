{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>My name is J\u00f3hannes and the purpose of this homepage is to document my participitation in the preparation course for FabAcademy and the FabAcademy 2025 itself. </p> <p>FabLab \u00cdsafj\u00f6r\u00f0ur will be my hosting FabLab. </p> <p>The homepage is devided into different sections. </p> <ul> <li> <p>Pre-FabAcademy</p> </li> <li> <p>Assignments</p> </li> <li> <p>Final Project</p> </li> </ul>"},{"location":"fproject/finalproject/","title":"Final Project","text":"<p>The Final Project is meant to utilize all important skills from the FabAcademy and make one thing work - from scratch to final product (prototype). </p>"},{"location":"fproject/finalproject/#ideas","title":"Ideas","text":""},{"location":"pre-fab/homepage/","title":"Setting up this Homepage","text":"<p>I decided to follow the recommendation from my supervisor and use Markdown as a base for my homepage. </p> <p>To learn the syntax I used this guide. </p> <p>The tutorial I found most helpful is on Youtube.</p>"},{"location":"pre-fab/homepage/#preparation","title":"Preparation","text":"<p>First it is required to set up VSCode and Python. </p> <p>Remeber to select \"Add Python to PATH\" during the installation of Python.</p> <p>Next, you need a GitHub Account and create a new repository there. </p> <p>Then I installed the Python Extension in VSCode under Extensions.</p> <p>When in VSCode on the Welcome screen select Clone Git Repository and choose the repository GitHub. </p> <p>Next, the Markdown libraries need to be installed via the terminal. Material is a theme, that might be useful, but is not required.</p> <pre><code>pip install mkdocs\n\npip install mkdocs-material\n</code></pre>"},{"location":"pre-fab/homepage/#creating-a-new-webpage","title":"Creating a new webpage","text":"<p>Now it is time to create the basic files and directories needed for the webpage.  <pre><code>mkdocs new .\n</code></pre> The file structure is now visible in the Explorer and the file index.md is the frontpage. </p> <p>The file mkdocs.yml is used for some settings as defining the url, the theme and site title.  <pre><code>site_name: My Pre-FabAcademy Hompeage\nsite_url: https://hannesjo.github.io/FabAcademy/\ntheme:\n  name: material\n</code></pre> Use the command  <pre><code>mkdocs serve\n</code></pre> to create the actual html webpage and preview it in the browser by clicking on the link in the terminal. </p> <p>Watch out: if using the venv virtual environment, as suggested in the tutorial, you cannot have the mkdocs library installed locally as well.  Check with  <pre><code>mkdocs --version\n</code></pre> if it is installed locally and use <pre><code>pip uninstall mkdocs\n</code></pre> to remove it. </p>"},{"location":"pre-fab/homepage/#transfering-the-files-to-github","title":"Transfering the files to GitHub","text":"<p>Now it's time to upload the files to GitHub. Use the commit button in the Source Control tab and remember to write a short message. Then click on sync changes. If it's the first time syncing to GitHub you need to set the login and password.  <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n</code></pre></p>"},{"location":"pre-fab/homepage/#creating-the-page-on-github","title":"Creating the page on GitHub","text":"<p>The files should be visible in the repository, now.  Go to Settings - Pages and select the branch and save.   After a refresh you should see the link to your webpage.</p>"},{"location":"pre-fab/homepage/#finetuning-the-homepage-using-packages","title":"Finetuning the homepage using packages","text":"<p>When everything was finally running, I added some features to the homepage by modifying the mkdocs.yml file (according to the Mkdocs-material documentation). </p> <p>One thing that is good to know is the format of the url, when using hyperlinks or inserting images. Make sure to use the relative format depending on the location of the webpage in the directory.  <pre><code>(../images/github_pages.png)\n</code></pre></p>"},{"location":"pre-fab/milling/","title":"Milling","text":"<p>In the preparation course I will use VCarve and the Shopbot to practice milling fabrication. </p> <p>The tutorial recommended by my supervisor includes all important information. </p>"},{"location":"pre-fab/milling/#the-workpiece","title":"The workpiece","text":"<p>As I wanted to make something I would actually use, I decided on making a trophy shield. </p> <p>I drew the outline in a sketch in Fusion 360, as I'm most familiar with that environment. Then I saved the sketch as a *.dxf file. </p> <p></p> <p>Next I looked for scrap wood that is large enough. I found a piece of 12mm birch plywood that I could cut in half and glue together to double the thickness. </p> <p></p> <p></p>"},{"location":"pre-fab/milling/#vcarve","title":"VCarve","text":"<p>I did the Job Setup and imported the dxf-file. Then I needed to align it to the center of the workpiece and mirror it to get the other half and delete some unwanted lines. </p> <p></p> <p>Next I joined the open vectors and created an inwards offset to get another path for some more engraving operations. (Later I realized, that it is very easy to select the offset in the toolpath operation as well). </p> <p></p> <p>Then it's time for the toolpaths.  I used the 2D Profile Toolpath for both the cutting and engraving operations, because I don't like, that the Quick Engraving Toolpath doesn't offer the ramp function.  I selected a 1/2'' straight end mill for the cutting and a 90\u00b0 engraving bit for the engraving. </p> <p></p>"},{"location":"pre-fab/milling/#bonus-adding-a-new-form-tool","title":"Bonus - Adding a new form tool","text":"<p>I decided to add a custom form tool to make the outer edge look more nice. The only advantage of adding the custom tool is, that the preview will look as the real workpiece and it's easier to identify possible mistakes, otherwise you could use a normal milling bit in VCarve and put the form bit in the ShopBot, if you know what you're doing. </p> <p>I needed to draw the right side profile of the milling bit and with the profile selected went into the Tool Library and defined a new tool. </p> <p>Then I added another 2D Profile Toolpath with an offset for the edge forming, using the new form tool. The resulting toolparts and machining preview look like this: </p> <p></p> <p>Lastly, I saved the toolpaths into one *.sbp file. </p>"},{"location":"pre-fab/milling/#shopbot","title":"Shopbot","text":"<p>I fixed the workpiece in the X/Y corner of the shopbot and picked the tools and collets I'm going to use. The spindle was already heated up, so no need to do that again.   </p> <p>First is the V-carving so I put the v-bit into the spindle and used the auto-zero function with the aluminium plate. Also i set the X/Y zero point. Then I added an offset of +5mm to the Z-axis to make a dry run with the tool and check for clearance of the screws.  </p> <p>When that was done, I readjusted the Z-offset and ran the first cutting path.   That worked well, so I changed the tool to the 1/2 milling bit and did the zeroing for that. During this operation something went wrong and the milling bit cut too deep into the material and crashed into a broken screw, that was hidden in the machine bed below the workpiece. When I realized, what was happening and stopped the router, it was already too late. The bit was bend and the workpiece had become loose. </p> <p>So what happend? Presumably, the feed/speed was too high for this bit and/or I didn't tighten the collet well enough. So while milling the first path, the vibration caused the milling bit to slowly move out of the collet and therefore cut deeper and deeper - increasing the load and vibration.  If it wasn't for the hidden (broken) screw in the end, it would have survived, but unfortunately the bit bend during the collision. As this also meant, that I had lost the alignment of the piece - I decided not to continue in the Shopbot and finish the edge milling with the third bit in my handrouter. </p> <p>The final result looks like this - not too bad for a rescued crash-piece.  </p>"},{"location":"pre-fab/pcb/","title":"PCB","text":"<p>When learning how to make a PCB I followed the tutorial on the Fab\u00cdsa-Homepage. </p> <p>Setting up KiCAD and InkScape, drawing the schematics, designing the PCB and transforming everything into a png-image was pretty straight forward. </p> <p>When saving the traces and cut images, remember to set the resolution to 1000px. My Inkscape resets itself to some lower value. </p> <p> </p>"},{"location":"pre-fab/pcb/#milling-of-the-pcb","title":"Milling of the PCB","text":"<p>Before milling you have to start the terminal for the connection to the milling machine and open the website. </p> <p>The machine has to be turned on and set to machining mode by pressing the \"view\" button. </p> <p>Attention: The X/Y Zero is not where you would expect it (in the lower left corner of the plate). There is an offset of about -30/-30 to it. </p> <p>Before abjusting z-zero - put the milling bit into the collet - move the spindle above the plate and lower the z-axis with the arrow buttons. Loosen the stop-screw of the collet again and drop the bit the las few millimeters. </p> <p>Typical speed is 4mm/s and cutting depth for the traces 0.1mm. </p> <p></p> <p></p> <p>The bit I used was a bit dull, so the cuts were not as clean as possible. A bit of 800grid wet sandpaper helps to smoothen it.  </p> <p></p> <p>After soldering the components on the PCB it looks quite okay, but does it work?</p> <p></p>"},{"location":"pre-fab/pcb/#programming-the-attiny","title":"Programming the attiny","text":"<p>I used the Arduino IDE to write a program. </p> <p>To actually being able to connect and program the Attiny a special UDPI programmer is needed. I got one from my instructor and it plugs into the USB-port and appears as a Serial Device.  </p> <p>Then I needed to add the megatinycore board library in the board manager and select the Attiny 412 board, as well as the COM-Port of the programmer and the type of the programmer.  </p> <p>It is important to realise, that the UPDI pin doesn't support a serial connection, so the serial monitor is not available for troubleshooting in the Arduino IDE. </p> <p>After a lot of debugging using the led I managed to have the program running and behaving as expected.  </p> <p>Here is the sketch: </p> <pre><code>//Defining which pin to use for LED and button\n#define LED 4\n#define BUTTON 0\n\n//Variable to count number of button press\nint cnt = 0;\n//Timer before executing the blink\nint cntpause = 0;\n\nvoid setup() { \n  pinMode(LED, OUTPUT);\n  pinMode(BUTTON, INPUT_PULLUP);\n}\n\nvoid loop() { \n  //Check if Button is pressed -&gt; counter +1\n  if(digitalRead(BUTTON) == LOW){\n    cnt++;  \n    cntpause=0;\n    while(digitalRead(BUTTON) == LOW){\n      //wait\n    }\n    digitalWrite(LED, HIGH);\n    delay(50);\n    digitalWrite(LED, LOW);\n    delay(50);      \n  //Check if button has been pressed at least once and if timer has reached 200 -&gt; then start blink\n  }else if(cnt &gt; 0 &amp;&amp; cntpause &gt; 200){\n    for(int i = 0; cnt &gt; i; i++){\n      digitalWrite(LED, HIGH);\n      delay(500);\n      digitalWrite(LED, LOW);\n      delay(500);     \n    }\n    //reset counter and timer\n    cntpause=0;\n    cnt=0;\n  //Check if button has been pressed at least once and increase timer counter by 10ms\n  }else if(cnt &gt; 0){\n    cntpause++;\n    delay(10);\n  }\n\n}\n</code></pre>"}]}